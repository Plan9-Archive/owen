.TH OWEN-SCHEDULER 4
.SH NAME
owen: scheduler \- distributed computation
.SH SYNOPSIS
.B mount
[
.B -A
]
.I schedaddr
.I dir
.PP
.nf
\fIdir\fP\f5/task\fP
\fIdir\fP\f5/stoptask\fP
\fIdir\fP\f5/reconnect\fP
\fIdir\fP\f5/attrs\fP
\fIdir\fP\f5/nodeattrs\fP
\fIdir\fP\f5/nodename\fP
\fIdir\fP\f5/admin\fP
\fIdir\fP\f5/admin/clone\fP
\fIdir\fP\f5/admin/\fIn\fP/ctl\fP
\fIdir\fP\f5/admin/\fIn\fP/data\fP
\fIdir\fP\f5/admin/\fIn\fP/description\fP
\fIdir\fP\f5/admin/\fIn\fP/duration\fP
\fIdir\fP\f5/admin/\fIn\fP/group\fP
\fIdir\fP\f5/admin/\fIn\fP/id\fP
\fIdir\fP\f5/admin/\fIn\fP/log\fP
\fIdir\fP\f5/admin/\fIn\fP/monitor\fP
\fIdir\fP\f5/admin/ctl\fP
\fIdir\fP\f5/admin/jobs\fP
\fIdir\fP\f5/admin/nodes\fP
\fIdir\fP\f5/admin/formats\fP
\fIdir\fP\f5/admin/group\fP
\fIdir\fP\f5/admin/times\fP
\fIdir\fP\f5/admin/times/always\fP
\fIdir\fP\f5/admin/times/\fP\fItime\fP
.fi
.SH DESCRIPTION
.IR Owen-scheduler (1)
provides a way to distribute jobs reliably over multiple
clients. The namespace it provides allows clients to request work
for currently running jobs, and for administrators to start,
stop, monitor and manipulate jobs.
The namespace is accessed by mounting
the scheduler at a given address
.I schedaddr
on the desired directory
.IR dir .
The
.B -A
option to
.I mount
is required if the scheduler is running without authentication.
.SS "Client interface"
Before doing anything, a client should first provide information
about itself. If it knows it, it should write its system
name to the
.B nodename
file. It should write any attributes to the
.B attrs
file.
.B Attrs
accepts a set of attribute-value pairs, formatted
as a quoted list, as generated by
.B String->quoted
(see
.IR string (2)).
Attributes for a node are remembered by default;
opening
.B attrs
with truncation (\f5OTRUNC\fP)
erases any current attributes for the node.
.PP
A client may request a task by opening the
.B task
file. The open will block until there is a task available.
The first subsequent read returns the
.I id
of the task to be executed. This can be used
as a handle when reconnecting back to the task should
the network fail. The first write gives a string identifying the
task locally (the string that will be sent on
.B stoptask
to kill the task; see below).
Reads now receive data from the task generator (see
.IR taskgenerator (2))
for the task; writes send data back (note that it is allowable
to read data from the task generator before writing the
local task id).
.PP
Reading from
.B stoptask
receives requests to kill currently executing tasks.
Each read returns the local identity of a task to be stopped,
as written to the
.B task
file, above. The client should arrange to stop that task,
if possible.
.PP
If the client detects that its connection to the scheduler
has been lost, and it holds some outstanding results that should
be sent back, it may reconnect by opening the
.B reconnect
file, and writing the
.I id
of the task to reconnect. If the write succeeds, reads and writes
now go to the task generator, as with the
.B task
file above. As above, the first subsequent write gives
the local identity of the task, to be used when stopping it.
.SS Administration interface
Files under the
.B admin
directory are accessible to adminstrative users, who can use
them to schedule new jobs, monitor job progress, adjust job priority,
available nodes, etc.
.PP
Opening
.B clone
allocates (but does not start) a new job.
The resulting file descriptor will be open on the
.B ctl
file of the new job. Reading this
file gives the number,
.IR n ,
of the new job. The files to control the job
are held in
.BR admin/\fIn\fP .
Writes to
.BR admin/\fIn\fP/ctl
control the job. A control request is a list of arguments, quoted as with
.B quoted
in
.IR string (2).
.TP 10
\f5load\fP \fItaskgenerator\fP [\fIarg\fP...]
Load and initialise a task generator for this job.
.I Taskgenerator
names a
.IR taskgenerator(2)
module, and the subsequent arguments give its parameters.
If the write failed, the task generator did not successfully start,
and the error string gives a reason why.
.TP
.B start
Start the job going. It will be added to the end of the current
queue of jobs.
.TP
.B stop
Remove the job from the current queue of jobs. This
does not stop any tasks that are currently executing on behalf of the job.
.TP
.B teardown
Stop any tasks currently executing on behalf of the job.
If the job is still queued, it is likely that those tasks will immediately
be rescheduled.
.TP
.B delete
Delete the job. This forces a teardown of all tasks on the job,
and removes all job data, and the job directory itself, as
soon as no-one is accessing the job directory.
.TP
\f5priority\fP \fIwhat\fP
Adjust the job's priority. If
.I what
is the number,
.IR n ,
of a job, the job's priority is set just lower than job
.IR n .
If
.I what
is
.BR high ,
the job is sent to the front of the queue;
if
.BR low ,
to the back. This request has no effect if the job is
not already queued.
.TP
\f5group\fP \fIwhat\fP [\fInode\fP...]
Adjust the group of nodes which will be considered to run this job.
.I What
can be one of:
.B all
(allow all nodes),
.B none
(no nodes),
.B set
(exactly the listed nodes),
.B add
(allow the listed nodes, plus any already part of the group),
.B del
(remove the listed nodes from the group).
A node is referred to by its network name.
.TP
.B setgroup
Tear down all tasks for this job that are currently running on nodes
outside the job's group.
.PP
.B Monitor
allows monitoring of the progress of the job.
The first read gives the current status of the job; subsequent reads
block until this changes, and then yield the new status,
unless the job has finished, in which case EOF is given.
The status is formatted as an S-expression where each field
is a decimal integer.
The names of the fields are provided in the
.B formats
file (see below), and include:
.TP 15
.B total
The total number of tasks comprising this job.
This is -1 if the number is unknown.
.TP
.B complete
The number of tasks completed so far (including permanently failed tasks
as well as tasks that have succeeded).
.TP
.B running
The number of tasks currently being processed.
.TP
.B failed
The number of tasks that have been permanently failed.
.TP
.B datain
The approximate amount of data that has been tranferred from
clients to scheduler.
.TP
.B dataout
The approximate amount of data that has been transferred from
scheduler to clients.
.TP
.B disconnected
The number of tasks that are awaiting reconnection.
.TP
.B duplicate
The number of executions of tasks which were successfully completed,
but someone else got there first.
.TP
.B totaltime
The total time spent by all nodes executing the tasks that
have been successfully completed, in seconds.
.PP
.B Duration
gives the length of time (in milliseconds) that the
job has been started.
.B Description
can be written to provide a human-readable description
of the job; when read it gives the same information.
.PP
.B Group
can be read to find out information about the nodes
available for the job (as set with the
.B group
control message, above).
If it is ``\f5all\fP'', all nodes are included;
if ``\f5none\fP'', no nodes are included. If the first word
is ``\f5+\fP'', all nodes but those subsequently listed are excluded;
if ``\f5-\fP'', all nodes are included but those listed.
.PP
Files in the
.B admin
directory provide access to functions not directly related to
a particular job. The file
.B admin/ctl
provides some control requests:
.TP 10
.B dump
Force an immediate dump of the current state of the scheduler
(this is usually done automatically every few seconds).
.TP
\f5group\fP \fIwhat\fP [\fInode\fP...]
Adjust the group of nodes available for running any task from
any job. Nodes excluded from this group will not be available
for any job, even if they are members of the group for that job.
The format of this request is exactly the same as for the job
.B group
control message.
The file
.B admin/group
can be read to find the current members of the group; the format
is the same as for the job-specific group file.
.TP
.B teardown
Stop all tasks currently running.
.TP
.B setgroup
Perform a
.B setgroup
operation on every current job.
.TP
\f5delnode\fP \fInode\fP...
Node information stays around indefinitely.
.B Delnode
allows deletion of stale nodes. Nodes information
about currently connected nodes will not be deleted.
.SS File formats
.B Admin/formats
can be read to find out the default format of various of the
informational files. It holds a set of S-expressions lists,
each representing the format for a file, as supported by
.IR format (2).
The first
element in the list gives the name of the file (currently one of
.BR jobs ,
.BR nodes ,
or
.BR monitor );
subsequent elements give the names of the fields available
from that file. If an element is itself a list, it represents a field
that can hold an arbitrary number of sub-records; the list's first
element gives the name of the field, and subsequent elements give the
names of the fields in the sub-records.
.PP
For example, the format definition for the
.B nodes
file is given as:
.EX
	(nodes (attrs attr val) blacklisted disconnecttime
		ipaddr name ncompleted nconnected nfailed
		(tasks jobid jobuniq taskid) times)
.EE
A node can have an arbitrary number of attributes
and can be running an arbitrary number of tasks.
.PP
Files mentioned in the
.B formats
file can have their format changed
by writing a format specification (using the conventions above,
but omitting the file name) to the file before reading the data.
The fields in the specification may be in any order, but
must be a subset of the specification given in
.BR formats .
For example, write
.EX
	(name ipaddr (attrs attr))
.EE
to the
.B nodes
file, and a sample record returned from the file might look like:
.EX
	(worker11 123.45.67.89
		((ostype Windows) (jobtype0 test) (jobtype1 exec)))
.EE
The capability is useful because it can both reduce the number of
fields to those actually required, this reducing network traffic,
and it provides a level of backward compatibility, allowing more
fields to be added to an informational file without affecting clients.
.PP
.B Admin/jobs
can be read to find out information on all current jobs.
Each job is formatted as a S-expression record (see
``File Formats'', above);
jobs are listed in queued order (head of the queue first),
with stopped and completed jobs being listed in arbitrary
order at the end.
Fields include:
.TP
.B uniq
The unique identifier for a job.
.TP
.B id
The job's identifier (its directory number).
.TP
.B status
The current status of the job (one of
.BR running ,
.BR stopped ,
.BR complete
or
.BR deleted ).
.TP
.B ncomplete
Number of tasks that have currently finished for the job.
This includes tasks that have permanently failed as well
as tasks that have succeeded.
.TP
.B ntotal
Total number of tasks comprising the job. This may be -1,
in which case the job has an unknown number of tasks.
.TP
.B argv
The arguments used to start the job (the first argument being
the name of the task generator module). This is formatted as
an S-expression sublist, each element giving one argument.
.PP
.B Admin/nodes
can be read to find out information on nodes known to the system.
Each node is represented by an S-expression record (see ``File Formats'',
above).
Fields include:
.TP
.B name
The name of the node.
.TP
.B ipaddr
The most recent network address known for that node,
including the port number that was used to connect.
.TP
.B nconnected
The number of connections currently active from the node.
.TP
.B disconnecttime
The length of time (in milliseconds) since a session from
the node last disconnected,
or ``\f5never\fP'' if no such time is known.
.TP
.B taskscomplete
The number of tasks successfully completed by the node.
.TP
.B tasksfailed
The number of tasks that the node has started and failed
to complete.
.TP
.B blacklisted
Non-zero if the node has been blacklisted for failing too
many tasks in a row. If this happens, the node is removed
from the global group.
.TP
.B attrs
The attributes of the node, as written to the
.B attrs
file (see above).
This is formatted as a set of sub-records, each containing two
fields,
.I attr
and
.IR val ,
giving the name of the attribute and its value.
Standard attribute names include:
.B ostype
(the name of the OS running on the node), and
.B cputype
(the kind of CPU used by the node, including its
name, clock speed and number of processors).
.TP
.B tasks
This describes the tasks currently being run by the
node, and is formatted as a set of sub-records, each including
the following fields:
.RS
.TP
.B jobuniq
The unique identifier of the tasks's job.
.TP
.B jobid
The directory number of the tasks's job.
.TP
.B taskid
The task identifier, as handed out by the task generator.
.RE
.SH SEE ALSO
.IR owen-intro (1),
.IR owen-scheduler (1),
.IR owen-jobmonitor (1)
.IR owen-nodemonitor (1)
.SH BUGS
The data-in and data-out fields will overflow.
.br
The name ``ipaddr'' should be ``addr''.
.\"missing description of:
.\"data, description, id, log, times/*
