#!/dis/sh.dis
load string std expr

fn mkjob {
	stage := mkjob
	echo ${quote $*} > args

	if{~ $#* 0 1} {
		error 'usage: mkjob ntasks countto'
	}
	ntasks := $1
	count := $2

	# copy our job specific files into a known location
	check mkdir jobfiles
	echo $count > jobfiles/total

	# determine the number of tasks
	echo $ntasks > ntasks
}

fn mktask {
	stage := mktask
	or{~ $#* 1} {
		error 'usage: mktask taskid'
	}
	taskid := $1
	taskdir := prep$taskid

	# create the task workspace
	check mkdir $taskdir
	check mkdir $taskdir/taskfiles

}

fn runtask {
	stage := runtask
	and{~ $#* 0 1} {error 'usage: runtask taskid runid attrs nodeattrs'}
	(taskid runid attrs nodeattrs) := $*
	taskdir := prep$taskid
	rundir := $taskdir/run.$runid

	check mkdir $rundir

	# send files
	check bind -b jobfiles $rundir
	check bind -b /grid/master/count/auxfiles $rundir
	check bind -b $taskdir/taskfiles $rundir
	check cd $rundir
	check puttar .
}

fn submit {
	stage := submit
	or{~ $#* 2} {error 'usage: submit taskid runid'}
	(taskid runid) := $*
	rundir := prep$taskid/run.$runid
	or {ftest -d $rundir} {mkdir $rundir}
	check cd $rundir
	check gettar -v >[1=2]
	echo gettar did finish with status $status >[1=2]
	status=''
}

fn endtask {
	stage := endtask
	or{~ $#* 2} {error 'usage: endtask taskid runid'}
	(taskid runid) := $*
	taskdir := prep$taskid

	# NOTE: the scheduler is locked during execution of this script
	# so tasks that take a long time should be avoided

	check cd $taskdir/run.$runid
	checkoutput
	check cd ..

	check mv run.$runid Output
	# rm -rf run.*			# XXX remove other task instance directories: save disk space
	check cd ..
	check mv prep$taskid task$taskid
}

fn failedtask {
	stage := failedtask
	or{~ $#* 1} {error 'usage: failedtask taskid'}
	taskid:=$1
	check mv prep$taskid failed$taskid
}
	
fn check{
	or {$*} {
		error error ${quote $status} in $stage executing ${quote $*} '(in cwd '^`{pwd}^')'
	}
	status=''
}

fn error {
	echo count.job: $* >[1=2]
	raise $"*
}

fn checkoutput {
	if{ftest -f error}{
		raise 'client detected failure: '^"{cat error}
	}
	status = ''
}
